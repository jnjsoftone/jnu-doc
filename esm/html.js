import{unescape as e}from"querystring";let t=t=>e(t),a=e=>{let t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"," ":"&nbsp;","/":"&#x2F;","=":"&#x3D;"};return e.replace(/[&<>"'\s/=]/g,e=>t[e]||e)},l=e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),r=e=>e.replace(/([[\]])/g,"\\$1"),s=e=>e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),n=e=>e.replace(/\\"/g,'"').replace(/\\n/g,"\n"),i=e=>e.replace(/"/g,'\\"'),p=e=>Object.entries(e).map(([e,t])=>{let l=e.replace(/^{{|}}$/g,"");return`
        <div class="variable-item is-collapsed">
          <span class="variable-key" data-variable="${a(e)}">${a(l)}</span>
          <span class="variable-value">${a(t)}</span>
          <span class="chevron-icon" aria-label="Expand">
            <i data-lucide="chevron-right"></i>
          </span>
        </div>
      `}).join(""),c=(e,t,a)=>{let l=e.getAttribute(t);if(l)try{let r=new URL(a.href);r.pathname.endsWith("/")||(r.pathname=r.pathname.substring(0,r.pathname.lastIndexOf("/")+1));let s=new URL(l,r);if(["http:","https:"].includes(s.protocol)){let a=s.href;e.setAttribute(t,a)}else{let s=l.split("/"),n=s[2];if(n&&n.includes(".")){let r=`${a.protocol}//`+l.split("://")[1];e.setAttribute(t,r)}else{let a=s.slice(3).join("/"),l=new URL(a,r.origin+r.pathname).href;e.setAttribute(t,l)}}}catch(a){console.warn(`Failed to process URL: ${l}`,a),e.setAttribute(t,l)}},o=e=>e<1e3?`${Math.round(e)}ms`:`${(e/1e3).toFixed(2)}s`;export{a as encodeHtml,t as decodeHtml,l as escapeRegExp,r as escapeMarkdown,s as escapeValue,n as unescapeValue,i as escapeDoubleQuotes,p as formatVariables,c as makeUrlAbsolute,o as formatDuration};